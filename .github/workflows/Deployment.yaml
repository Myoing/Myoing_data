name: Myoing Data Pipeline Deployment

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # 빌드 작업: Python 환경 설정, 린트 검사, Docker 이미지 빌드 및 푸시
  build:
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # Python 3.10 버전 설정
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # pip 캐시 설정
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 의존성 패키지 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          fi

      # Python 버전 출력
      - name: Display Python version
        run: python -V

      # flake8 린트 검사 수행
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Dockerfile 존재 여부 확인
      - name: Check for Dockerfile
        run: |
          if [ -f "./Dockerfile" ]; then
            echo "Dockerfile found."
          else
            echo "Dockerfile not found. Aborting."
            exit 1
          fi

      # QEMU 설정 (다중 아키텍처 빌드를 위한 가상화 지원)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시 (캐시 활용)
      - name: Build and push Docker image with cache
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:cache,mode=max

  # 배포 작업: 서버에 접속하여 docker-compose로 전체 서비스 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # GitHub Secrets로부터 .env 파일 생성
      - name: Create .env file from GitHub Secrets
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env

      # 서버로 프로젝트 전체 복사
      - name: Copy project source code to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "."
          target: "~/Myoing_data"

      # 서버로 .env 파일 복사
      - name: Copy .env file to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: ".env"
          target: "~/Myoing_data/"

      # 서버에 SSH 접속하여 docker-compose 명령 실행
      - name: SSH into server and deploy with docker-compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            cd ~/Myoing_data
            docker-compose pull
            docker-compose down -v
            docker-compose up -d
            docker system prune -af --volumes