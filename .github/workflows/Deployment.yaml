name: Myoing Data Pipeline Deployment

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # 빌드 단계: 코드 검사 + Docker 이미지 빌드 및 Docker Hub 푸시
  build:
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 체크아웃
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v3

      # Python 환경 설정
      - name: Python 3.10 설정
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # pip 캐시 설정 (설치 시간 단축)
      - name: pip 캐시 설정
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 의존성 설치
      - name: 패키지 설치
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          fi

      # Python 버전 출력
      - name: Python 버전 확인
        run: python -V

      # 코드 린트 검사
      - name: flake8 코드 검사
        run: |
          echo "문법 오류 검사..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "스타일 검사..."
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Dockerfile 존재 확인
      - name: Dockerfile 확인
        run: |
          if [ -f "./Dockerfile" ]; then
            echo "Dockerfile 존재 확인됨"
          else
            echo "Dockerfile 없음. 중단합니다."
            exit 1
          fi

      # QEMU 설정 (다중 아키텍처 지원)
      - name: QEMU 설정
        uses: docker/setup-qemu-action@v2

      # Buildx 설정 (고급 빌드 기능)
      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v2

      # Docker Hub 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 캐시 기반 푸시
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:cache,mode=max

  # 배포 단계: 서버에 접속하여 docker-compose로 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 다시 체크아웃 (코드 복사용)
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v3

      # 서버로 프로젝트 전체 복사 (scp)
      - name: 서버로 코드 복사
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "."
          target: "~/Myoing_data"

      # .env 파일을 서버로 복사
      - name: .env 파일 복사
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: ".env"
          target: "~/Myoing_data/.env"

      # 서버에 접속하여 docker-compose로 배포 수행
      - name: 서버에 접속하여 배포 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            # 프로젝트 디렉토리로 이동
            cd ~/Myoing_data

            # 최신 Docker 이미지 풀
            docker-compose pull

            # 기존 컨테이너 및 볼륨 중지 및 삭제
            docker-compose down -v

            # 새로운 컨테이너 실행
            docker-compose up -d

            # 불필요한 이미지 및 볼륨 정리
            docker system prune -af --volumes
