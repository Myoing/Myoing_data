name: Myoing Data Pipeline Deployment

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # 빌드 job: Python 환경 설정, 의존성 설치, 코드 검사, Docker 이미지 빌드 및 푸시를 수행
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # pip 캐시 저장/복원으로 Python 패키지 설치 시간 단축
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          fi

      - name: Display Python version
        run: python -V

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check for Dockerfile
        run: |
          echo "Checking for Dockerfile..."
          if [ -f "./Dockerfile" ]; then
            echo "Dockerfile found."
          else
            echo "Dockerfile not found. Aborting."
            exit 1
          fi

      # BuildKit 다중 아키텍처 지원을 위한 QEMU 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Buildx 고급 빌드 기능 활성화를 위한 빌더 인스턴스 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub 로그인으로 이미지 푸시 권한 확보
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # BuildKit 캐시 활용하여 Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image with cache
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:cache,mode=max

  # 배포 job: 빌드된 Docker 이미지를 서버에 배포하고 컨테이너를 실행
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest

            # Stop and remove existing container
            docker stop ${{ secrets.DOCKER_REPO }} || true
            docker rm   ${{ secrets.DOCKER_REPO }} || true

            # Run new container
            docker run -d \
              --name ${{ secrets.DOCKER_REPO }} \
              --restart unless-stopped \
              -p 7070:7070 \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest

            # Cleanup unused images
            docker system prune -af --volumes
